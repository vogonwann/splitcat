name: Release Draft

on:
  workflow_dispatch:

env:
  FLUTTER_VERSION: "3.13.9"
  APK_BUILD_DIR: "/tmp/build"
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

jobs:
  build:
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Get version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(sed -n 's/^version: \([0-9]*\.[0-9]*\.[0-9]*\).*/\1/p' pubspec.yaml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  # set_release_info:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
  #   steps:
  #     - name: Get release
  #       id: get_release
  #       uses: bruceadams/get-release@v1.3.2
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       with:
  #         tag: ${{ needs.build.outputs.version }}
  #     - name: Get upload URL
  #       id: get_upload_url
  #       run: |
  #         upload_url=${{steps.get_release.outputs.upload_url}}
  #         echo "upload_url=$upload_url" >> $GITHUB_OUTPUT
    # Step 2: Create a GitHub release
  create_release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ needs.build.outputs.version }}"
          release_name: "v${{ needs.build.outputs.version }}"
          draft: true
          prerelease: false

    # build_apk:
    #   needs: [build, create_release]
    #   runs-on: ubuntu-22.04

    # steps:
    #   - name: Checkout repository
    #     uses: actions/checkout@v4

    #   - name: Remove proprietary dependencies
    #     run: sh scripts/remove_proprietary_dependencies.sh

    #   - name: Copy files to env.APK_BUILD_DIR
    #     run: |
    #       mkdir -p $APK_BUILD_DIR
    #       cp -r . $APK_BUILD_DIR

    #   - name: Decode key.properties file
    #     working-directory: ${{ env.APK_BUILD_DIR }}
    #     env:
    #       ENCODED_STRING: ${{ secrets.ANDROID_KEY_PROPERTIES }}
    #     run: echo $ENCODED_STRING | base64 -di > android/key.properties

    #   - name: Decode android-keystore.jks file
    #     working-directory: ${{ env.APK_BUILD_DIR }}
    #     env:
    #       ENCODED_STRING: ${{ secrets.ANDROID_KEY_STORE }}
    #     run: mkdir secrets && echo $ENCODED_STRING | base64 -di > secrets/android-keystore.jks

    #   - name: Set up JDK 17
    #     uses: actions/setup-java@v4
    #     with:
    #       distribution: 'temurin'
    #       java-version: '17'

    #   - name: Install Flutter
    #     uses: subosito/flutter-action@v2
    #     with:
    #       flutter-version: ${{ env.FLUTTER_VERSION }}

    #   - name: Dependencies
    #     working-directory: ${{ env.APK_BUILD_DIR }}/
    #     run: flutter pub get

    #   - name: Build APK
    #     working-directory: ${{ env.APK_BUILD_DIR }}/
    #     run: flutter build apk --split-per-abi

    #   - name: Upload APK
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: apk-result
    #       path: |
    #         ${{ env.APK_BUILD_DIR }}/build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
    #         ${{ env.APK_BUILD_DIR }}/build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
    #         ${{ env.APK_BUILD_DIR }}/build/app/outputs/flutter-apk/app-x86_64-release.apk

  build_tar_x86_64:
    needs: [build, create_release]
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake libgtk-3-dev ninja-build libayatana-appindicator3-dev

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"

      - name: Dependencies
        working-directory: ./
        run: flutter pub get

      - name: List project files
        run: ls -R
      
      - name: Print working directory
        run: pwd

      - name: Clean build
        run: flutter clean

      - name: Compile linux
        working-directory: ./
        run: flutter build linux --release --verbose

      - name: List files even if the build fails
        if: always()
        run: |
          echo "Listing build directory contents:"
          ls -R ./build/linux/x64/release/bundle/lib/ || echo "Directory does not exist!"
      
      - name: Create tar.gz archive
        run: |
          cd ./build/linux/x64/release/bundle
          tar -czvf ../../../../../result.tar.gz *

      - name: Upload tar.gz archive
        id: upload_tar_64
        uses: actions/upload-artifact@v4
        with:
          name: splitcat-linux-x64
          path: ./*.tar.gz
      
      - name: Find tar.gz file
        id: find_targz
        run: |
          VERSION=${{ needs.build.outputs.version }}
          TARGZ_PATH=$(find . -name "*.tar.gz")
          echo "targz_path=$TARGZ_PATH" >> $GITHUB_OUTPUT

      # Dodaj korak za upload tar.gz fajla na release
      - name: Upload tar.gz to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}  # Preuzima upload_url iz create_release joba
          asset_path: ${{ steps.find_targz.outputs.targz_path }}
          asset_name: splitcat-linux-x64.tar.gz
          asset_content_type: application/gzip
  # Manage the Flutter version on the self-hosted runner manually!
  # Flutter currently doesn't provide Linux ARM64 binaries.
  # build_tar_arm_64:
    # needs: [build, set_release_info]
    # runs-on: [ self-hosted, linux, arm64 ]

    # steps:
    #   - uses: actions/checkout@v4

    #   - name: Install dependencies
    #     run: |
    #       sudo apt-get update
    #       sudo apt-get install -y clang cmake libgtk-3-dev ninja-build libayatana-appindicator3-dev

    #   - name: Dependencies
    #     working-directory: ./
    #     run: flutter pub get

    #   - name: Compile linux
    #     working-directory: ./
    #     run: flutter build linux --release

    #   - name: Create tar.gz archive
    #     run: |
    #       cd build/linux/arm64/release/bundle
    #       tar -czvf ../../../../../result.tar.gz *

    #   - name: Upload tar.gz archive
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: tar-gz-arm-64-result
    #       path: ./*.tar.gz

  build_deb_x86_64:
    needs: [build, create_release]
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        id: deb_release
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake libgtk-3-dev ninja-build libayatana-appindicator3-dev

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"

      - name: Enable dart_distributor
        run: dart pub global activate flutter_distributor

      - name: Update PATH
        run: echo 'export PATH="$PATH:$HOME/.pub-cache/bin"' >> ~/.bashrc

      - name: Build deb package
        working-directory: ./
        run: flutter_distributor package --platform linux --targets deb --flutter-build-args=verbose

      - name: List files in dist
        run: ls -la dist
      - name: Test version
        run: echo ${{ needs.build.outputs.version }}

      - name: Find deb file
        id: find_deb
        run: |
          VERSION=${{ needs.build.outputs.version }}
          DEB_PATH=$(find dist -name "splitcat-$VERSION*-linux.deb")
          echo "deb_path=$DEB_PATH" >> $GITHUB_OUTPUT

      - name: Check if deb file exists
        id: check_file
        run: |
          if [[ ! -f "${{ steps.find_deb.outputs.deb_path }}" ]]; then
            echo "File not found: ${{ steps.find_deb.outputs.deb_path }}"
            exit 1
          fi

      - name: Upload deb file
        uses: actions/upload-artifact@v4
        id: upload_deb
        with:
          name: deb-x86-64-result
          path: ${{ steps.find_deb.outputs.deb_path }}

      # Upload DEB file to release
      - name: Upload DEB to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_deb.outputs.deb_path }}
          asset_name: splitcat-linux-x64.deb
          asset_content_type: application/x-debian-package

  # Manage the Flutter version on the self-hosted runner manually!
  # Flutter currently doesn't provide Linux ARM64 binaries.
  # build_deb_arm_64:
    # needs: [build, set_release_info]
    # runs-on: [ self-hosted, linux, arm64 ]

    # steps:
    #   - uses: actions/checkout@v4

    #   - name: Install dependencies
    #     run: |
    #       sudo apt-get update
    #       sudo apt-get install -y clang cmake libgtk-3-dev ninja-build libayatana-appindicator3-dev

    #   - name: Enable dart_distributor
    #     run: dart pub global activate flutter_distributor

    #   - name: Build deb package
    #     working-directory: ./
    #     run: PATH="$PATH:$HOME/.pub-cache/bin" flutter_distributor package --platform linux --targets deb

    #   - name: Find deb file
    #     id: find_deb
    #     run: |
    #       VERSION=${{ needs.build.outputs.version }}
    #       DEB_PATH=$(find dist -name "splitcat-$VERSION*-linux.deb")
    #       echo "deb_path=$DEB_PATH" >> $GITHUB_OUTPUT

    #   - name: Check if deb file exists
    #     id: check_file
    #     run: |
    #       if [[ ! -f "${{ steps.find_deb.outputs.deb_path }}" ]]; then
    #         echo "File not found: ${{ steps.find_deb.outputs.deb_path }}"
    #         exit 1
    #       fi

    #   - name: Upload deb file
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: deb-arm-64-result
    #       path: ${{ steps.find_deb.outputs.deb_path }}

  build_appimage_x86_64:
    needs: [build, create_release]
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake libgtk-3-dev ninja-build libayatana-appindicator3-dev libfuse2

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"

      - name: Dependencies
        working-directory: ./
        run: flutter pub get

      - name: Compile linux
        working-directory: ./
        run: flutter build linux --release

      - name: Copy compiled linux files
        run: |
          mkdir AppDir
          cp -r build/linux/x64/release/bundle/* AppDir/

      - name: Print working directory
        run: pwd

      - name: Copy logo to AppDir
        run: |
          mkdir -p AppDir/usr/share/icons/hicolor/16x16/apps
          cp /home/runner/work/splitcat/splitcat/linux/flutter/assets/icons/16x16/icon.png AppDir/usr/share/icons/hicolor/16x16/apps/splitcat.png
          mkdir -p AppDir/usr/share/icons/hicolor/32x32/apps
          cp /home/runner/work/splitcat/splitcat/linux/flutter/assets/icons/32x32/icon.png AppDir/usr/share/icons/hicolor/32x32/apps/splitcat.png
          mkdir -p AppDir/usr/share/icons/hicolor/64x64/apps
          cp /home/runner/work/splitcat/splitcat/linux/flutter/assets/icons/64x64/icon.png AppDir/usr/share/icons/hicolor/64x64/apps/splitcat.png
          mkdir -p AppDir/usr/share/icons/hicolor/128x128/apps
          cp /home/runner/work/splitcat/splitcat/linux/flutter/assets/icons/128x128/icon.png AppDir/usr/share/icons/hicolor/128x128/apps/splitcat.png
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          cp /home/runner/work/splitcat/splitcat/linux/flutter/assets/icons/256x256/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/splitcat.png

      - name: Copy Recipe to correct location
        run: cp /home/runner/work/splitcat/splitcat/scripts/appimage/AppImageBuilder_x86_64.yml AppImageBuilder.yml

      - name: List AppDir
        run: ls AppDir/

      - name: Build AppImage
        uses: AppImageCrafters/build-appimage@57c3bc6963f870ce3be103117de5b5e33ffbaeb6
        with:
          recipe: ./AppImageBuilder.yml

      - name: Find AppImage file
        id: find_appimage
        run: |
          APPIMAGE_PATH=$(find . -name "*.AppImage" -print -quit)
          echo "appimage_path=$APPIMAGE_PATH" >> $GITHUB_OUTPUT
          echo "appimage_name=$(basename "$APPIMAGE_PATH")" >> $GITHUB_OUTPUT
  

      - name: Upload AppImage to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}  # Preuzima upload_url iz create_release joba
          asset_path: ${{ steps.find_appimage.outputs.appimage_path }}  
          asset_name: ${{ steps.find_appimage.outputs.appimage_name }}
          asset_content_type: application/octet-stream  # MIME tip za AppImage

  build_windows_zip_x86_64:
    needs: [build, create_release]

    runs-on: windows-latest
    
    steps:
    - name: Fix long file paths
      run: git config --system core.longpaths true

    - name: Checkout repository
      uses: actions/checkout@v4

    - uses: subosito/flutter-action@v2
      with:
            flutter-version: ${{ env.FLUTTER_VERSION }}
            channel: "stable"
    - name: Clean previous builds
      run: flutter clean

    - name: Show current dir
      run: pwd

    - name: List current dir
      run: ls windows

    - name: Dependencies
      working-directory: ./
      run: flutter pub get

    - name: Compile for Windows
      working-directory: ./
      run: flutter build windows --release --verbose

    - name: Create empty settings.json
      working-directory: ./
      run: echo {} > D:\a\splitcat\splitcat\build\windows\runner\Release\settings.json

    - name: Add DLL files
      working-directory: ./
      run: |
            Copy-Item scripts/windows/x64/msvcp140.dll D:\a\splitcat\splitcat\build\windows\runner\Release\
            Copy-Item scripts/windows/x64/vcruntime140.dll D:\a\splitcat\splitcat\build\windows\runner\Release\
            Copy-Item scripts/windows/x64/vcruntime140_1.dll D:\a\splitcat\splitcat\build\windows\runner\Release\

    - name: Zip compiled files
      working-directory: ./
      id: zip_file
      run: | 
          zipPath = "Splitcat.zip"
          Compress-Archive -Path build/windows/runner/Release/* -DestinationPath $zipPath
          echo "zip_path=$ZIP_PATH" >> $GITHUB_OUTPUT
          echo "zip_name=$(basename $ZIP_NAME)" >> $GITHUB_OUTPUT

    - name: Upload ZIP file
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}  # Preuzima upload_url iz create_release joba
        asset_path: ${{ steps.zip_file.outputs.zip_path }}  # Putanja do generisanog ZIP fajla
        asset_name: ${{ steps.zip_file.outputs.zip_name }}  # Ime ZIP fajla
        asset_content_type: application/zip  # MIME tip za ZIP

  build_rpm_x86_64:
    needs: [build, create_release]
    runs-on: ubuntu-latest
    container: fedora:38
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: sudo dnf install -y clang cmake gtk3-devel ninja-build libappindicator-gtk3-devel jq findutils which git patchelf rpm-build

    - uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: "stable"

    - name: Configure safe directory for Git
      run: git config --global --add safe.directory "/opt/hostedtoolcache/flutter/stable-${{ env.FLUTTER_VERSION }}-x64"

#      - name: Configure safe directory for Git (pub-cache)
#        run: git config --global --add safe.directory "/opt/hostedtoolcache/flutter/stable-${{ env.FLUTTER_VERSION }}-x64/.pub-cache"

    - name: Get flutter path
      run: which flutter

    - name: Get dart path
      run: which dart

    - name: Enable dart_distributor
      run: PUB_CACHE=/opt/hostedtoolcache/flutter/stable-${{ env.FLUTTER_VERSION }}-x64/.pub-cache dart pub global activate flutter_distributor

    - name: Debugging PATH and flutter_distributor
      run: |
        echo "PATH: $PATH"
        command -v flutter_distributor || echo "flutter_distributor not found"

    - name: Build rpm package
      working-directory: app
      run: FLUTTER_ROOT=/opt/hostedtoolcache/flutter/stable-${{ env.FLUTTER_VERSION }}-x64 flutter_distributor package --platform linux --targets rpm

    - name: Find AppImage file
      id: find_rpm
      run: |
        APPIMAGE_PATH=$(find . -name "*.rpm" -print -quit)
        echo "appimage_path=$APPIMAGE_PATH" >> $GITHUB_OUTPUT
        echo "appimage_name=$(basename "$APPIMAGE_PATH")" >> $GITHUB_OUTPUT
        
    - name: Check if rpm file exists
      id: check_file
      run: |
        if [[ ! -f "${{ steps.find_rpm.outputs.rpm_path }}" ]]; then
          echo "File not found: ${{ steps.find_rpm.outputs.rpm_path }}"
          exit 1
        fi
  

    - name: Upload AppImage to release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}  # Preuzima upload_url iz create_release joba
        asset_path: ${{ steps.find_rpm.outputs.appimage_path }}  
        asset_name: ${{ steps.find_rpm.outputs.appimage_name }}
        asset_content_type: application/octet-stream

  # build_tar_arm64:
  #   needs: [build, create_release]
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y clang cmake libgtk-3-dev ninja-build libayatana-appindicator3-dev

  #     - uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{ env.FLUTTER_VERSION }}
  #         channel: "stable"

  #     - name: Dependencies
  #       working-directory: ./
  #       run: flutter pub get

  #     - name: Compile linux for ARM64
  #       working-directory: ./
  #       run: flutter build linux --release --target-platform=linux-arm64

  #     - name: Create tar.gz archive for ARM64
  #       run: |
  #         cd build/linux/arm64/release/bundle
  #         tar -czvf ../../../../../result-arm64.tar.gz *

  #     - name: Upload tar.gz file
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: tar-arm64-result
  #         path: ./result-arm64.tar.gz

  #     - name: Upload tar.gz to Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: v${{ needs.build.outputs.version }}  # Treba se podudarati sa prethodnim korakom
  #         files: ./result-arm64.tar.gz
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # build_deb_arm64:
  #   needs: [build, create_release]
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y clang cmake libgtk-3-dev ninja-build libayatana-appindicator3-dev debhelper

  #     - uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{ env.FLUTTER_VERSION }}
  #         channel: "stable"

  #     - name: Dependencies
  #       working-directory: ./
  #       run: flutter pub get

  #     - name: Compile linux for ARM64
  #       working-directory: ./
  #       run: flutter build linux --release --target-platform=linux-arm64

  #     - name: Create DEB package for ARM64
  #       run: |
  #         mkdir -p ~/deb-package/DEBIAN
  #         echo "Package: splitcat" > ~/deb-package/DEBIAN/control
  #         echo "Version: 1.0" >> ~/deb-package/DEBIAN/control
  #         echo "Section: utils" >> ~/deb-package/DEBIAN/control
  #         echo "Priority: optional" >> ~/deb-package/DEBIAN/control
  #         echo "Architecture: arm64" >> ~/deb-package/DEBIAN/control
  #         echo "Maintainer: Your Name <you@example.com>" >> ~/deb-package/DEBIAN/control
  #         echo "Description: SplitCat Application" >> ~/deb-package/DEBIAN/control
  #         cp -r build/linux/arm64/release/bundle/* ~/deb-package/usr/local/bin/
  #         dpkg-deb --build ~/deb-package

  #     - name: Upload DEB file
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: deb-arm64-result
  #         path: ~/deb-arm64-package.deb
      
  #     - name: Upload deb_64 to Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: v${{ needs.build.outputs.version }}  # Treba se podudarati sa prethodnim korakom
  #         files: ./deb-arm64-package.deb
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # build_rpm_arm64:
  #   needs: [build, create_release]
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y clang cmake libgtk-3-dev ninja-build libayatana-appindicator3-dev rpm

  #     - uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{ env.FLUTTER_VERSION }}
  #         channel: "stable"

  #     - name: Dependencies
  #       working-directory: ./
  #       run: flutter pub get

  #     - name: Compile linux for ARM64
  #       working-directory: ./
  #       run: flutter build linux --release --target-platform=linux-arm64

  #     - name: Create RPM package for ARM64
  #       run: |
  #         mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
  #         cp build/linux/arm64/release/bundle/* ~/rpmbuild/SOURCES/
  #         echo "Name: splitcat" > ~/rpmbuild/SPECS/splitcat.spec
  #         echo "Version: 1.0" >> ~/rpmbuild/SPECS/splitcat.spec
  #         echo "Release: 1" >> ~/rpmbuild/SPECS/splitcat.spec
  #         echo "Summary: SplitCat Application" >> ~/rpmbuild/SPECS/splitcat.spec
  #         echo "License: MIT" >> ~/rpmbuild/SPECS/splitcat.spec
  #         echo "Source0: %{name}-%{version}.tar.gz" >> ~/rpmbuild/SPECS/splitcat.spec
  #         echo "%description" >> ~/rpmbuild/SPECS/splitcat.spec
  #         echo "SplitCat is an application for file splitting." >> ~/rpmbuild/SPECS/splitcat.spec
  #         echo "%files" >> ~/rpmbuild/SPECS/splitcat.spec
  #         echo "/usr/bin/splitcat" >> ~/rpmbuild/SPECS/splitcat.spec
  #         echo "%changelog" >> ~/rpmbuild/SPECS/splitcat.spec
  #         rpmbuild -ba ~/rpmbuild/SPECS/splitcat.spec

  #     - name: Upload RPM file
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: rpm-arm64-result
  #         path: ~/rpmbuild/RPMS/arm64/*.rpm

  #     - name: Upload rpm_arm64 to Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: v${{ needs.build.outputs.version }}  # Treba se podudarati sa prethodnim korakom
  #         files: ./rpm-arm64-result.rpm
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # build_appimage_arm64:
  #   needs: [build, create_release]
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y clang cmake libgtk-3-dev ninja-build libayatana-appindicator3-dev libfuse2

  #     - uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{ env.FLUTTER_VERSION }}
  #         channel: "stable"

  #     - name: Dependencies
  #       working-directory: ./
  #       run: flutter pub get

  #     - name: Compile linux for ARM64
  #       working-directory: ./
  #       run: flutter build linux --release --target-platform=linux-arm64

  #     - name: Copy compiled linux files
  #       run: |
  #         mkdir AppDir
  #         cp -r build/linux/arm64/release/bundle/* AppDir/

  #     - name: Copy logo to AppDir
  #       run: |
  #         mkdir -p AppDir/usr/share/icons/hicolor/16x16/apps
  #         cp /home/runner/work/splitcat/splitcat/linux/flutter/assets/icons/16x16/icon.png AppDir/usr/share/icons/hicolor/16x16/apps/splitcat.png
  #         mkdir -p AppDir/usr/share/applications
  #         cp /home/runner/work/splitcat/splitcat/linux/flutter/assets/app.desktop AppDir/usr/share/applications/splitcat.desktop

  #     - name: Create AppImage for ARM64
  #       run: |
  #         AppImageAssigner --app-name splitcat --app-version 1.0 --arch arm64 AppDir splitcat.AppImage

  #     - name: Upload AppImage
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: appimage-arm64-result
  #         path: ./splitcat-1rm64.AppImage

  #     - name: Upload AppImage to Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: v${{ needs.build.outputs.version }}  # Treba se podudarati sa prethodnim korakom
  #         files: ./splitcat-1rm64.AppImage

  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  

  # release:
  #   needs:
  #     - build
  #     # - set_release_info
  #     # - build_apk
  #     - build_tar_x86_64
  #     # - build_tar_arm_64
  #     - build_deb_x86_64
  #     # - build_deb_arm_64
  #     - build_appimage_x86_64
  #     - build_windows_zip_x86_64
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Draft release
  #       id: draft_release
  #       uses: release-drafter/release-drafter@v6
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag: v${{ needs.build.outputs.version }}
  #         name: v${{ needs.build.outputs.version }}

  #     # APK
  #     # - name: Download apk file
  #     #   uses: actions/download-artifact@v4
  #     #   with:
  #     #     name: apk-result
  #     #     path: apk-result

  #     # - name: Copy apk file to root
  #     #   run: cp apk-result/*.apk .

  #     # - name: Upload Release Asset (arm32v7)
  #     #   uses: actions/upload-release-asset@v1
  #     #   env:
  #     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     #   with:
  #     #     upload_url: ${{ steps.draft_release.outputs.upload_url }}
  #     #     asset_path: app-armeabi-v7a-release.apk
  #     #     asset_name: Splitcat-${{ needs.build.outputs.version }}-android-arm32v7.apk
  #     #     asset_content_type: application/vnd.android.package-archive

  #     # - name: Upload Release Asset (arm64v8)
  #     #   uses: actions/upload-release-asset@v1
  #     #   env:
  #     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     #   with:
  #     #     upload_url: ${{ steps.draft_release.outputs.upload_url }}
  #     #     asset_path: app-arm64-v8a-release.apk
  #     #     asset_name: Splitcat-${{ needs.build.outputs.version }}-android-arm64v8.apk
  #     #     asset_content_type: application/vnd.android.package-archive

  #     # - name: Upload Release Asset (x64)
  #     #   uses: actions/upload-release-asset@v1
  #     #   env:
  #     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     #   with:
  #     #     upload_url: ${{ steps.draft_release.outputs.upload_url }}
  #     #     asset_path: app-x86_64-release.apk
  #     #     asset_name: Splitcat-${{ needs.build.outputs.version }}-android-x64.apk
  #     #     asset_content_type: application/vnd.android.package-archive

  #     # TAR.GZ (x86_64)
  #     - name: Download tar.gz file
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: tar-gz-x86-64-result
  #         path: tar-gz-x86-64-result

  #     - name: List files in tar.gz-directory
  #       run: ls -l tar-gz-x86-64-result

  #     - name: Copy tar.gz file to root
  #       run: cp tar-gz-x86-64-result/* result.tar.gz

  #     - name: Upload tar.gz
  #       uses: xresloader/upload-to-github-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         file: "result.tar.gz"
  #         tags: true
  #         draft: true


      # - name: Upload Release Asset (tar.gz)
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.draft_release.outputs.upload_url }}
      #     asset_path: result.tar.gz
      #     asset_name: Splitcat-${{ needs.build.outputs.version }}-linux-x86-64.tar.gz
      #     asset_content_type: application/gzip

      # TAR.GZ (arm_64)
      # - name: Download tar.gz file
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: tar-gz-arm-64-result
      #     path: tar-gz-arm-64-result

      # - name: List files in tar.gz-directory
      #   run: ls -l tar-gz-arm-64-result

      # - name: Copy tar.gz file to root
      #   run: cp tar-gz-arm-64-result/* result.tar.gz

      # - name: Upload Release Asset (tar.gz)
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.draft_release.outputs.upload_url }}
      #     asset_path: result.tar.gz
      #     asset_name: Splitcat-${{ needs.build.outputs.version }}-linux-arm-64.tar.gz
      #     asset_content_type: application/gzip

      # DEB (x86_64)
      # - name: Download deb file
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: deb-x86-64-result
      #     path: deb-x86-64-result

      # - name: Copy deb file to root
      #   run: cp deb-x86-64-result/*.deb result.deb

      # - name: Upload Release Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.draft_release.outputs.upload_url }}
      #     asset_path: result.deb
      #     asset_name: Splitcat-${{ needs.build.outputs.version }}-linux-x86-64.deb
      #     asset_content_type: application/vnd.debian.binary-package

      # # DEB (arm_64)
      # # - name: Download deb file
      # #   uses: actions/download-artifact@v4
      # #   with:
      # #     name: deb-arm-64-result
      # #     path: deb-arm-64-result

      # # - name: Copy deb file to root
      # #   run: cp deb-arm-64-result/*.deb result.deb

      # # - name: Upload Release Asset
      # #   uses: actions/upload-release-asset@v1
      # #   env:
      # #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # #   with:
      # #     upload_url: ${{ steps.draft_release.outputs.upload_url }}
      # #     asset_path: result.deb
      # #     asset_name: Splitcat-${{ needs.build.outputs.version }}-linux-arm-64.deb
      # #     asset_content_type: application/vnd.debian.binary-package

      # # APPIMAGE (x86_64)
      # - name: Download AppImage file
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: appimage-x86-64-result
      #     path: appimage-x86-64-result

      # - name: List files in appimage-directory
      #   run: ls -l appimage-x86-64-result

      # - name: Copy AppImage file to root
      #   run: |
      #     for file in appimage-x86-64-result/*; do
      #       if [[ $file == *.AppImage && $file != *.AppImage.zsync ]]; then
      #         cp "$file" result.AppImage
      #       fi
      #     done

      # - name: Upload Release Asset (AppImage)
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.draft_release.outputs.upload_url }}
      #     asset_path: result.AppImage
      #     asset_name: Splitcat-${{ needs.build.outputs.version }}-linux-x86-64.AppImage
      #     asset_content_type: application/x-appimage

      # # WINDOWS ZIP (x86_64)
      # - name: Download windows zip file
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: windows-zip-x86-64-result
      #     path: windows-zip-x86-64-result

      # - name: Copy zip file to root
      #   run: cp windows-zip-x86-64-result/*.zip result.zip

      # - name: Upload Release Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.draft_release.outputs.upload_url }}
      #     asset_path: result.zip
      #     asset_name: Splitcat-${{ needs.build.outputs.version }}-windows-x86-64.zip
      #     asset_content_type: application/zip
